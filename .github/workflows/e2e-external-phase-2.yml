name: Run end-to-end tests on external PR approval

on:
  check_run:
    types:
      - created
      - rerequested

jobs:
  e2e:
    name: End-to-end tests
    runs-on: ubuntu-latest
    if: toJSON(github.event.check_run.pull_requests) != '[]'
    permissions:
      actions: read
      pull-requests: write
      contents: write
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.E2E_APP_ID }}
          private-key: ${{ secrets.E2E_APP_PRIVATE_KEY }}

      - name: Update check with URL
        run: >
          gh api
          "repos/py-cov-action/python-coverage-comment-action/check-runs/${CHECK_RUN_ID}"
          -X PATCH
          -F details_url="$(gh api "/repos/py-cov-action/python-coverage-comment-action/actions/jobs/${JOB_ID}" --jq '.url')"
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CHECK_RUN_ID: ${{ github.event.check_run.id }}
          JOB_ID: ${{ github.job }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Important: use the commit that was reviewed. GitHub is making sure
          # that this is race-condition-proof
          ref: ${{ github.event.check_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          pipx install poetry --python=python3.11

      - name: Poetry caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/
          key: ${{ hashFiles('poetry.lock') }}

      - name: Install deps
        run: poetry install

      - name: Run end-to-end tests
        run: poetry run pytest tests/end_to_end
        env:
          COVERAGE_COMMENT_E2E_GITHUB_TOKEN_USER_1: ${{ secrets.COVERAGE_COMMENT_E2E_GITHUB_TOKEN_USER_1 }}
          COVERAGE_COMMENT_E2E_GITHUB_TOKEN_USER_2: ${{ secrets.COVERAGE_COMMENT_E2E_GITHUB_TOKEN_USER_2 }}
          COVERAGE_COMMENT_E2E_ACTION_REF: ${{ github.event.check_run.head_sha }}
          COVERAGE_COMMENT_E2E_REPO_SUFFIX: ${{ github.event.check_run.pull_requests[0].number }}

      - name: Report results to Check
        if: always()
        run: >
          gh api
          "repos/py-cov-action/python-coverage-comment-action/check-runs/${CHECK_RUN_ID}"
          -X PATCH
          -F conclusion=${JOB_STATUS}
          -F status=completed
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CHECK_RUN_ID: ${{ github.event.check_run.id }}
          JOB_STATUS: ${{ job.status }}
