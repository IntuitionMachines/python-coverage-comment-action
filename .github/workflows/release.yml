# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Docker image

on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

concurrency:
  group: release

jobs:
  push-to-registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    # Check if the tests were successful and were launched by a push event
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ewjoachim
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          # See Dockerfile.build for instructions on bumping this.
          tags: ewjoachim/python-coverage-comment-action-base:v3
          push: true
          file: Dockerfile.build

  compute-tags:
    name: Re-tag action with new version
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Apply new tags
        run: |
          git fetch --tags origin
          current="$(git describe --tags --abbrev=0 --match 'v*.*.*')"
          should_bump_minor=$(pipx run conventional list-commits --from-last-tag --parse | jq --slurp 'any(.[]; .data.subject.breaking == "!")')

          major="$(echo $current | cut -d. -f1)"
          minor="$(echo $current | cut -d. -f2)"
          patch="$(echo $current | cut -d. -f3)"

          git tag -f ${major}
          git push -f origin ${major}

          # Major releases will be released manually.
          if [ "${should_bump_minor}" = "true" ]; then
            minor=$((minor + 1))
            new_tag="${major}.${minor}.0"
          else
            patch=$((patch + 1))
            new_tag="${major}.${minor}.${patch}"
          fi

          gh release create ${new_tag} --generate-notes
